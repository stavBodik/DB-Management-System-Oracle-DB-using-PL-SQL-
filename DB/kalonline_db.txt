--------------------------------------------------------
--  File created - Sunday-May-08-2016   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence EQUIPMENT_AUTO_INC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."EQUIPMENT_AUTO_INC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 100 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence GUILD_ID_AUTO_INC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."GUILD_ID_AUTO_INC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 301 CACHE 100 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence JOB_ID_AUTO_INC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."JOB_ID_AUTO_INC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 100 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PLAYER_ID_AUTO_INC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."PLAYER_ID_AUTO_INC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 100 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SKILL_ID_AUTO_INC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."SKILL_ID_AUTO_INC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 100 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SKILL_SET_ID_AUTO_INC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."SKILL_SET_ID_AUTO_INC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 100 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence USER_ID_AUTO_INC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."USER_ID_AUTO_INC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 100 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table EQUIPMENTS
--------------------------------------------------------

  CREATE TABLE "HR"."EQUIPMENTS" 
   (	"EQUIPMENT_ID" NUMBER(4,0), 
	"EQ_TYPE" VARCHAR2(20 BYTE), 
	"MIN_LEVEL" NUMBER(4,0), 
	"EVASION" NUMBER(4,0), 
	"DEFENSE" NUMBER(4,0), 
	"ABSORPTION" NUMBER(4,0)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."EQUIPMENTS"."EQUIPMENT_ID" IS 'Primary key column of equipments table.';
 
   COMMENT ON COLUMN "HR"."EQUIPMENTS"."EQ_TYPE" IS 'The type of this equipment ...for example helement,boots etc...';
 
   COMMENT ON COLUMN "HR"."EQUIPMENTS"."MIN_LEVEL" IS 'MINIMUM LEVEL FOR USE ';
 
   COMMENT ON COLUMN "HR"."EQUIPMENTS"."EVASION" IS 'MONSTER MISS ';
 
   COMMENT ON COLUMN "HR"."EQUIPMENTS"."DEFENSE" IS 'MONSTER DIFFENSE';
 
   COMMENT ON COLUMN "HR"."EQUIPMENTS"."ABSORPTION" IS 'NUMBER OF TIMES THIS EQUIPMENT CAN BE FIXED
';
--------------------------------------------------------
--  DDL for Table GUILDS
--------------------------------------------------------

  CREATE TABLE "HR"."GUILDS" 
   (	"GUILD_ID" NUMBER(4,0), 
	"GUILD_NAME" VARCHAR2(30 BYTE), 
	"G_LEVEL" NUMBER(4,0)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."GUILDS"."GUILD_ID" IS 'Primary key column of guilds table.';
 
   COMMENT ON COLUMN "HR"."GUILDS"."GUILD_NAME" IS 'the name of this guild';
 
   COMMENT ON COLUMN "HR"."GUILDS"."G_LEVEL" IS 'the level of this guild';
--------------------------------------------------------
--  DDL for Table INVENTORIES
--------------------------------------------------------

  CREATE TABLE "HR"."INVENTORIES" 
   (	"PLAYER_ID" NUMBER(4,0), 
	"EQUIPMENT_ID" NUMBER(4,0), 
	"PLAYER_NICK_NAME" VARCHAR2(25 BYTE)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."INVENTORIES"."PLAYER_ID" IS 'player id of of inventory. Foreign key to player_id column of players table. ';
 
   COMMENT ON COLUMN "HR"."INVENTORIES"."EQUIPMENT_ID" IS 'equipment id of of inventory. Foreign key to equipment_id column of equipments table. ';
--------------------------------------------------------
--  DDL for Table JOBS
--------------------------------------------------------

  CREATE TABLE "HR"."JOBS" 
   (	"JOB_ID" NUMBER(4,0), 
	"JOB_TYPE" VARCHAR2(20 BYTE), 
	"SKILL_SET_ID" NUMBER(4,0), 
	"JOB_LVL" NUMBER DEFAULT 0
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."JOBS"."JOB_ID" IS 'Primary key column of jobs table.';
 
   COMMENT ON COLUMN "HR"."JOBS"."JOB_TYPE" IS 'TYPE OF JOB
(KINIGHT,ARCHER,MAGICIAN...
)';
 
   COMMENT ON COLUMN "HR"."JOBS"."SKILL_SET_ID" IS 'FK FROM SKILL_SET_TABLE SKILS
 SET FOR THIS JOB';
 
   COMMENT ON COLUMN "HR"."JOBS"."JOB_LVL" IS 'THE LVL WHEN THIS JOB IS REACHED
';
--------------------------------------------------------
--  DDL for Table PLAYERS
--------------------------------------------------------

  CREATE TABLE "HR"."PLAYERS" 
   (	"PLAYER_ID" NUMBER(4,0), 
	"USER_ID" NUMBER(4,0), 
	"NICK_NAME" VARCHAR2(25 BYTE), 
	"GUILD_ID" NUMBER(4,0), 
	"JOB_ID" NUMBER(4,0), 
	"PLAYER_LEVEL" NUMBER(4,0) DEFAULT 0, 
	"STRANGE" NUMBER(4,0) DEFAULT 10, 
	"AGILITY" NUMBER(4,0) DEFAULT 5, 
	"INTELLIGENCE" NUMBER(4,0) DEFAULT 7, 
	"HEALTH" NUMBER(4,0) DEFAULT 15
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."PLAYERS"."PLAYER_ID" IS 'Primary key column of players table.';
 
   COMMENT ON COLUMN "HR"."PLAYERS"."USER_ID" IS 'user id of of a player. Foreign key to user_id column of users table. ';
 
   COMMENT ON COLUMN "HR"."PLAYERS"."NICK_NAME" IS 'Primary key column of players table.the nickname of the player';
 
   COMMENT ON COLUMN "HR"."PLAYERS"."GUILD_ID" IS 'guild_id of a player. Foreign key to guild_id column of guilds table. ';
 
   COMMENT ON COLUMN "HR"."PLAYERS"."JOB_ID" IS 'job_id of a player. Foreign key to job_id column of jobs table. ';
 
   COMMENT ON COLUMN "HR"."PLAYERS"."PLAYER_LEVEL" IS 'the level of player';
 
   COMMENT ON COLUMN "HR"."PLAYERS"."STRANGE" IS 'the strange of player';
 
   COMMENT ON COLUMN "HR"."PLAYERS"."AGILITY" IS 'the agility  of player';
 
   COMMENT ON COLUMN "HR"."PLAYERS"."INTELLIGENCE" IS 'the intelegence of player';
 
   COMMENT ON COLUMN "HR"."PLAYERS"."HEALTH" IS 'the health of player';
--------------------------------------------------------
--  DDL for Table SKILLS
--------------------------------------------------------

  CREATE TABLE "HR"."SKILLS" 
   (	"SKILL_ID" NUMBER(4,0), 
	"NAME" VARCHAR2(100 BYTE), 
	"ACQUIREMENT" NUMBER(4,0), 
	"S_LEVEL" NUMBER(4,0), 
	"COOL_DOWN_TIME" FLOAT(126), 
	"EXECUTION_TIME" FLOAT(126)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."SKILLS"."SKILL_ID" IS 'Primary key column of skills table.';
 
   COMMENT ON COLUMN "HR"."SKILLS"."NAME" IS 'The name descrive this skill
';
 
   COMMENT ON COLUMN "HR"."SKILLS"."ACQUIREMENT" IS 'Acquirement Conditionlevel For using this skill';
 
   COMMENT ON COLUMN "HR"."SKILLS"."S_LEVEL" IS 'The level of this skill

';
 
   COMMENT ON COLUMN "HR"."SKILLS"."COOL_DOWN_TIME" IS 'The time need to wait for using the skill ones again
';
 
   COMMENT ON COLUMN "HR"."SKILLS"."EXECUTION_TIME" IS 'The time need to wait each cool down for skill execute';
--------------------------------------------------------
--  DDL for Table SKILL_SETS
--------------------------------------------------------

  CREATE TABLE "HR"."SKILL_SETS" 
   (	"SKILL_SET_ID" NUMBER(4,0), 
	"SKILL_ID" NUMBER(4,0), 
	"SKILL_ID1" NUMBER(4,0), 
	"SKILL_ID2" NUMBER(4,0), 
	"SKILL_ID3" NUMBER(4,0), 
	"TYPE" VARCHAR2(20 BYTE)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."SKILL_SETS"."SKILL_SET_ID" IS 'Primary key column of skiil_sets table.';
 
   COMMENT ON COLUMN "HR"."SKILL_SETS"."SKILL_ID" IS 'skill id of this skill_set. Foreign key to skill_id column of skills table. ';
 
   COMMENT ON COLUMN "HR"."SKILL_SETS"."SKILL_ID1" IS 'skill id of this skill_set. Foreign key to skill_id column of skills table. ';
 
   COMMENT ON COLUMN "HR"."SKILL_SETS"."SKILL_ID2" IS 'skill id of this skill_set. Foreign key to skill_id column of skills table. ';
 
   COMMENT ON COLUMN "HR"."SKILL_SETS"."SKILL_ID3" IS 'skill id of this skill_set. Foreign key to skill_id column of skills table. ';
 
   COMMENT ON COLUMN "HR"."SKILL_SETS"."TYPE" IS 'the type describe the skill set belongs to which job';
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "HR"."USERS" 
   (	"USER_ID" NUMBER(4,0), 
	"PASSWORD" VARCHAR2(12 BYTE), 
	"EMAIL" VARCHAR2(30 BYTE), 
	"FIRST_NAME" VARCHAR2(20 BYTE), 
	"LAST_NAME" VARCHAR2(20 BYTE), 
	"COUNTRY" VARCHAR2(20 BYTE), 
	"AGE" NUMBER(3,0), 
	"USER_NAME" VARCHAR2(20 BYTE)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."USERS"."USER_ID" IS 'Primary key column of users table.';
 
   COMMENT ON COLUMN "HR"."USERS"."PASSWORD" IS 'the password of user account';
 
   COMMENT ON COLUMN "HR"."USERS"."EMAIL" IS 'the email of user account';
 
   COMMENT ON COLUMN "HR"."USERS"."FIRST_NAME" IS 'the first name of user owner';
 
   COMMENT ON COLUMN "HR"."USERS"."LAST_NAME" IS 'the last  name of user owner';
 
   COMMENT ON COLUMN "HR"."USERS"."COUNTRY" IS 'the country where user owner ';
 
   COMMENT ON COLUMN "HR"."USERS"."AGE" IS 'the age of user account owner';
REM INSERTING into HR.EQUIPMENTS
SET DEFINE OFF;
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (3,'Gloves',8,1,7,0);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (1,'Armor',8,1,12,1);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (2,'Helmet',8,1,5,1);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (4,'Boots',8,4,3,1);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (5,'Shorts',8,5,3,0);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (6,'Armor',16,3,15,2);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (7,'Helmet',16,3,10,1);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (8,'Gloves',16,2,11,0);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (9,'Boots',16,8,8,1);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (10,'Shorts',16,9,7,0);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (11,'Armor',32,5,27,3);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (12,'Helmet',32,5,22,1);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (13,'Gloves',32,3,21,0);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (14,'Boots',32,13,18,2);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (15,'Shorts',14,17,7,0);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (16,'Armor',50,17,44,5);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (17,'Helmet',50,9,42,2);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (18,'Gloves',50,6,43,1);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (19,'Boots',50,19,32,2);
Insert into HR.EQUIPMENTS (EQUIPMENT_ID,EQ_TYPE,MIN_LEVEL,EVASION,DEFENSE,ABSORPTION) values (20,'Shorts',50,19,28,3);
REM INSERTING into HR.GUILDS
SET DEFINE OFF;
Insert into HR.GUILDS (GUILD_ID,GUILD_NAME,G_LEVEL) values (201,'test',10);
Insert into HR.GUILDS (GUILD_ID,GUILD_NAME,G_LEVEL) values (2,'HeavensWrathH',1);
Insert into HR.GUILDS (GUILD_ID,GUILD_NAME,G_LEVEL) values (3,'VOID',5);
Insert into HR.GUILDS (GUILD_ID,GUILD_NAME,G_LEVEL) values (1,'Legendd',3);
REM INSERTING into HR.INVENTORIES
SET DEFINE OFF;
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (1,10,'BudA');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (4,1,'AdskiDeAnus');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (4,2,'AdskiDeAnus');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (4,3,'AdskiDeAnus');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (4,4,'AdskiDeAnus');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (4,5,'AdskiDeAnus');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (5,17,'Dokie');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (5,18,'Dokie');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (5,19,'Dokie');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (5,20,'Dokie');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (6,1,'Millky');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (6,2,'Millky');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (6,3,'Millky');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (6,4,'Millky');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (6,5,'Millky');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (6,20,'Millky');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (7,1,'gozmit');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (7,8,'gozmit');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (7,9,'gozmit');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (9,3,'shamorty');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (9,4,'shamorty');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (9,5,'shamorty');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (9,12,'shamorty');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (11,1,'Brads');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (11,2,'Brads');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (11,3,'Brads');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (11,4,'Brads');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (11,5,'Brads');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (12,6,'Whack Attack');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (12,7,'Whack Attack');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (12,8,'Whack Attack');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (12,9,'Whack Attack');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (12,10,'Whack Attack');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (13,11,'PoPkiss');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (13,13,'PoPkiss');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (13,14,'PoPkiss');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (13,15,'PoPkiss');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (1,11,'BudA');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (1,12,'BudA');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (1,13,'BudA');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (1,14,'BudA');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (1,15,'BudA');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (2,1,'BaBy_BluE');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (2,2,'BaBy_BluE');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (2,3,'BaBy_BluE');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (2,15,'BaBy_BluE');
Insert into HR.INVENTORIES (PLAYER_ID,EQUIPMENT_ID,PLAYER_NICK_NAME) values (3,7,'Shorty');
REM INSERTING into HR.JOBS
SET DEFINE OFF;
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (4,'General',1,60);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (1,'Wandering Knight',1,0);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (2,'Commander',1,50);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (3,'Vagabond Sword-man',1,50);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (5,'God of Sword',1,70);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (6,'Wandering Archer',2,0);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (7,'Apprentice Archer',2,45);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (8,'Imperial Commander',2,50);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (9,'Expert Archer',2,60);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (10,'Imperial General',2,70);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (11,'God of Bow',2,72);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (12,'Scholar',3,0);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (13,'Literary Person',3,25);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (14,'Hermit',3,50);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (15,'Ascetic',3,60);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (16,'Military Adviser',3,70);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (17,'Wandering Thief',4,0);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (18,'Hitman',4,50);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (19,'Swordsman',4,50);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (20,'Dark Shadow',4,60);
Insert into HR.JOBS (JOB_ID,JOB_TYPE,SKILL_SET_ID,JOB_LVL) values (21,'Unearthly Ghost',4,70);
REM INSERTING into HR.PLAYERS
SET DEFINE OFF;
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (3,3,'Shorty',1,10,22,32,60,33,15);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (4,3,'AdskiDeAnus',1,1,50,55,60,55,15);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (5,4,'Dokie',null,2,70,100,77,82,15);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (6,5,'Millky',2,21,45,50,50,32,45);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (7,6,'gozmit',2,3,12,55,45,60,45);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (8,6,'bLaZiNg^DuCk-',3,13,45,25,25,40,77);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (9,6,'shamorty',1,15,45,34,50,60,45);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (11,8,'Brads',3,2,45,34,50,60,70);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (12,9,'Whack Attack',3,17,45,55,13,60,66);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (13,10,'PoPkiss',null,4,45,40,50,60,45);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (1,1,'BudA',1,1,80,92,105,101,93);
Insert into HR.PLAYERS (PLAYER_ID,USER_ID,NICK_NAME,GUILD_ID,JOB_ID,PLAYER_LEVEL,STRANGE,AGILITY,INTELLIGENCE,HEALTH) values (2,2,'BaBy_BluE',1,3,66,92,45,101,80);
REM INSERTING into HR.SKILLS
SET DEFINE OFF;
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (3,'Critical Hit ',10,5,0,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (1,'Weapon Mastery',1,20,0,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (2,'Lightning Slash',5,10,0.7,0.9);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (4,'Shield Attack
',25,1,10,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (5,'Defense',3,5,0,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (6,'Bow Mastery
',1,20,0,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (7,'Staggering Blow
',5,10,0,1.2);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (8,'Fatal Blow
',10,5,0,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (9,'Passive Attack
',18,3,0.8,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (10,'Lightning Magic
',1,10,0.6,0.6);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (11,'Heal',7,5,4.2,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (12,'Fire Magic
',8,20,0.6,1.3);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (13,'Cure',10,5,0.6,1.8);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (14,'Attack 
Power Up',1,10,0,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (15,'Increase
Target 
Rate',5,10,0,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (16,'Hiding',15,3,60,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (17,'Assault',19,5,30,0);
Insert into HR.SKILLS (SKILL_ID,NAME,ACQUIREMENT,S_LEVEL,COOL_DOWN_TIME,EXECUTION_TIME) values (20,'Tesy',1,1,0.1,0.1);
REM INSERTING into HR.SKILL_SETS
SET DEFINE OFF;
Insert into HR.SKILL_SETS (SKILL_SET_ID,SKILL_ID,SKILL_ID1,SKILL_ID2,SKILL_ID3,TYPE) values (2,6,7,8,9,'Archer');
Insert into HR.SKILL_SETS (SKILL_SET_ID,SKILL_ID,SKILL_ID1,SKILL_ID2,SKILL_ID3,TYPE) values (3,10,11,12,13,'Magician');
Insert into HR.SKILL_SETS (SKILL_SET_ID,SKILL_ID,SKILL_ID1,SKILL_ID2,SKILL_ID3,TYPE) values (4,14,15,16,17,'Thief');
Insert into HR.SKILL_SETS (SKILL_SET_ID,SKILL_ID,SKILL_ID1,SKILL_ID2,SKILL_ID3,TYPE) values (1,1,2,3,4,'Knight');
REM INSERTING into HR.USERS
SET DEFINE OFF;
Insert into HR.USERS (USER_ID,PASSWORD,EMAIL,FIRST_NAME,LAST_NAME,COUNTRY,AGE,USER_NAME) values (3,'!2d32d2','yair_vaisP@walla.com','yairr','vais','israel',23,'yavis');
Insert into HR.USERS (USER_ID,PASSWORD,EMAIL,FIRST_NAME,LAST_NAME,COUNTRY,AGE,USER_NAME) values (1,'q4r3wdcvbn','stavbodik@gmail.com','stav','bodik','israel',26,'stav_bodik');
Insert into HR.USERS (USER_ID,PASSWORD,EMAIL,FIRST_NAME,LAST_NAME,COUNTRY,AGE,USER_NAME) values (2,'f43fe4','moshek@gmail.com','moshe','keynan','israel',18,'angel');
Insert into HR.USERS (USER_ID,PASSWORD,EMAIL,FIRST_NAME,LAST_NAME,COUNTRY,AGE,USER_NAME) values (4,'dwqsd0','yahel_kka@googlemail.com','yahel','koch','israel',14,'yahel_l');
Insert into HR.USERS (USER_ID,PASSWORD,EMAIL,FIRST_NAME,LAST_NAME,COUNTRY,AGE,USER_NAME) values (5,'QW2dd','michael@gmail.com','michael','grinman','israel',21,'apache');
Insert into HR.USERS (USER_ID,PASSWORD,EMAIL,FIRST_NAME,LAST_NAME,COUNTRY,AGE,USER_NAME) values (6,'q1w24re','orca@wall.com','oriel','ginon','india',19,'orior');
Insert into HR.USERS (USER_ID,PASSWORD,EMAIL,FIRST_NAME,LAST_NAME,COUNTRY,AGE,USER_NAME) values (8,'azxcfd','b_boceon@gmail.com','bibi','oceon','israel',18,'beyon_b');
Insert into HR.USERS (USER_ID,PASSWORD,EMAIL,FIRST_NAME,LAST_NAME,COUNTRY,AGE,USER_NAME) values (9,'1234cvbn','meytal@yahoo.com','meytal','vishman','russia',12,'wounderful');
Insert into HR.USERS (USER_ID,PASSWORD,EMAIL,FIRST_NAME,LAST_NAME,COUNTRY,AGE,USER_NAME) values (10,'asdflkjh','kokoriko@gmail.com','koko','hameleh','israel',26,'kokoking');
Insert into HR.USERS (USER_ID,PASSWORD,EMAIL,FIRST_NAME,LAST_NAME,COUNTRY,AGE,USER_NAME) values (11,'ASDASD','DASDAW@DSADSA.COM','DSA','DSA','DSA',23,'KOKO');
--------------------------------------------------------
--  DDL for Index EQUIPMENTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."EQUIPMENTS_PK" ON "HR"."EQUIPMENTS" ("EQUIPMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SKILL_SETS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."SKILL_SETS_PK" ON "HR"."SKILL_SETS" ("SKILL_SET_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index GUILDS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."GUILDS_PK" ON "HR"."GUILDS" ("GUILD_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PLAYERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PLAYERS_PK" ON "HR"."PLAYERS" ("PLAYER_ID", "NICK_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."USERS_PK" ON "HR"."USERS" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index JOBS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."JOBS_PK" ON "HR"."JOBS" ("JOB_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SKILS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."SKILS_PK" ON "HR"."SKILLS" ("SKILL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  Constraints for Table GUILDS
--------------------------------------------------------

  ALTER TABLE "HR"."GUILDS" ADD CONSTRAINT "GUILDS_PK" PRIMARY KEY ("GUILD_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."GUILDS" MODIFY ("GUILD_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."GUILDS" MODIFY ("GUILD_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."GUILDS" MODIFY ("G_LEVEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EQUIPMENTS
--------------------------------------------------------

  ALTER TABLE "HR"."EQUIPMENTS" ADD CONSTRAINT "EQUIPMENTS_PK" PRIMARY KEY ("EQUIPMENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."EQUIPMENTS" MODIFY ("EQUIPMENT_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EQUIPMENTS" MODIFY ("EQ_TYPE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EQUIPMENTS" MODIFY ("MIN_LEVEL" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EQUIPMENTS" MODIFY ("EVASION" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EQUIPMENTS" MODIFY ("DEFENSE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EQUIPMENTS" MODIFY ("ABSORPTION" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INVENTORIES
--------------------------------------------------------

  ALTER TABLE "HR"."INVENTORIES" MODIFY ("PLAYER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SKILLS
--------------------------------------------------------

  ALTER TABLE "HR"."SKILLS" ADD CONSTRAINT "SKILS_PK" PRIMARY KEY ("SKILL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."SKILLS" MODIFY ("SKILL_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SKILLS" MODIFY ("NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SKILLS" MODIFY ("ACQUIREMENT" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SKILLS" MODIFY ("S_LEVEL" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SKILLS" MODIFY ("COOL_DOWN_TIME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SKILLS" MODIFY ("EXECUTION_TIME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table JOBS
--------------------------------------------------------

  ALTER TABLE "HR"."JOBS" ADD CONSTRAINT "JOBS_PK" PRIMARY KEY ("JOB_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."JOBS" MODIFY ("JOB_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."JOBS" MODIFY ("JOB_TYPE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."JOBS" MODIFY ("SKILL_SET_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."JOBS" MODIFY ("JOB_LVL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SKILL_SETS
--------------------------------------------------------

  ALTER TABLE "HR"."SKILL_SETS" ADD CONSTRAINT "SKILL_SETS_PK" PRIMARY KEY ("SKILL_SET_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."SKILL_SETS" MODIFY ("SKILL_SET_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SKILL_SETS" MODIFY ("SKILL_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SKILL_SETS" MODIFY ("SKILL_ID1" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SKILL_SETS" MODIFY ("SKILL_ID2" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SKILL_SETS" MODIFY ("SKILL_ID3" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SKILL_SETS" MODIFY ("TYPE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "HR"."USERS" MODIFY ("USER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."USERS" MODIFY ("PASSWORD" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."USERS" MODIFY ("EMAIL" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."USERS" MODIFY ("USER_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."USERS" ADD CONSTRAINT "USERS_PK" PRIMARY KEY ("USER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PLAYERS
--------------------------------------------------------

  ALTER TABLE "HR"."PLAYERS" ADD CONSTRAINT "PLAYERS_PK" PRIMARY KEY ("PLAYER_ID", "NICK_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."PLAYERS" MODIFY ("PLAYER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."PLAYERS" MODIFY ("USER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."PLAYERS" MODIFY ("NICK_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."PLAYERS" MODIFY ("JOB_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."PLAYERS" MODIFY ("PLAYER_LEVEL" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."PLAYERS" MODIFY ("STRANGE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."PLAYERS" MODIFY ("AGILITY" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."PLAYERS" MODIFY ("INTELLIGENCE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."PLAYERS" MODIFY ("HEALTH" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table INVENTORIES
--------------------------------------------------------

  ALTER TABLE "HR"."INVENTORIES" ADD CONSTRAINT "EQP_ID" FOREIGN KEY ("EQUIPMENT_ID")
	  REFERENCES "HR"."EQUIPMENTS" ("EQUIPMENT_ID") ENABLE;
 
  ALTER TABLE "HR"."INVENTORIES" ADD CONSTRAINT "PLAYER_NICKN" FOREIGN KEY ("PLAYER_ID", "PLAYER_NICK_NAME")
	  REFERENCES "HR"."PLAYERS" ("PLAYER_ID", "NICK_NAME") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table JOBS
--------------------------------------------------------

  ALTER TABLE "HR"."JOBS" ADD CONSTRAINT "SKILL_SET_FK" FOREIGN KEY ("SKILL_SET_ID")
	  REFERENCES "HR"."SKILL_SETS" ("SKILL_SET_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PLAYERS
--------------------------------------------------------

  ALTER TABLE "HR"."PLAYERS" ADD CONSTRAINT "GUILD_ID" FOREIGN KEY ("GUILD_ID")
	  REFERENCES "HR"."GUILDS" ("GUILD_ID") ON DELETE SET NULL ENABLE;
 
  ALTER TABLE "HR"."PLAYERS" ADD CONSTRAINT "JOB_ID" FOREIGN KEY ("JOB_ID")
	  REFERENCES "HR"."JOBS" ("JOB_ID") ON DELETE SET NULL ENABLE;
 
  ALTER TABLE "HR"."PLAYERS" ADD CONSTRAINT "USER_ID" FOREIGN KEY ("USER_ID")
	  REFERENCES "HR"."USERS" ("USER_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SKILL_SETS
--------------------------------------------------------

  ALTER TABLE "HR"."SKILL_SETS" ADD CONSTRAINT "SKILL_SETS_FK1" FOREIGN KEY ("SKILL_ID")
	  REFERENCES "HR"."SKILLS" ("SKILL_ID") ENABLE;
 
  ALTER TABLE "HR"."SKILL_SETS" ADD CONSTRAINT "SKILL_SETS_FK2" FOREIGN KEY ("SKILL_ID1")
	  REFERENCES "HR"."SKILLS" ("SKILL_ID") ENABLE;
 
  ALTER TABLE "HR"."SKILL_SETS" ADD CONSTRAINT "SKILL_SETS_FK3" FOREIGN KEY ("SKILL_ID2")
	  REFERENCES "HR"."SKILLS" ("SKILL_ID") ENABLE;
 
  ALTER TABLE "HR"."SKILL_SETS" ADD CONSTRAINT "SKILL_SETS_FK4" FOREIGN KEY ("SKILL_ID3")
	  REFERENCES "HR"."SKILLS" ("SKILL_ID") ENABLE;
--------------------------------------------------------
--  DDL for Trigger EQUIPMENT_ID_AUTO_INC_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."EQUIPMENT_ID_AUTO_INC_TRIG" 
  BEFORE INSERT ON equipments
  FOR EACH ROW
BEGIN
  SELECT EQUIPMENT_AUTO_INC_SEQ.nextval
    INTO :new.equipment_id
    FROM dual;
END;
/
ALTER TRIGGER "HR"."EQUIPMENT_ID_AUTO_INC_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger GUILD_ID_AUTO_INC_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."GUILD_ID_AUTO_INC_TRIG" 
  BEFORE INSERT ON guilds
  FOR EACH ROW
BEGIN
  SELECT GUILD_ID_AUTO_INC_SEQ.nextval
    INTO :new.guild_id
    FROM dual;
END;
/
ALTER TRIGGER "HR"."GUILD_ID_AUTO_INC_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger JOB_ID_AUTO_INC_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."JOB_ID_AUTO_INC_TRIG" 
  BEFORE INSERT ON jobs
  FOR EACH ROW
BEGIN
  SELECT JOB_ID_AUTO_INC_SEQ.nextval
    INTO :new.job_id
    FROM dual;
END;
/
ALTER TRIGGER "HR"."JOB_ID_AUTO_INC_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PLAYER_ID_AUTO_INC_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."PLAYER_ID_AUTO_INC_TRIG" 
  BEFORE INSERT ON players
  FOR EACH ROW
BEGIN
  SELECT PLAYER_ID_AUTO_INC_SEQ.nextval
    INTO :new.player_id
    FROM dual;
END;
/
ALTER TRIGGER "HR"."PLAYER_ID_AUTO_INC_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SKILL_ID_AUTO_INC_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."SKILL_ID_AUTO_INC_TRIG" 
  BEFORE INSERT ON skills
  FOR EACH ROW
BEGIN
  SELECT SKILL_ID_AUTO_INC_SEQ.nextval
    INTO :new.skill_id
    FROM dual;
END;
/
ALTER TRIGGER "HR"."SKILL_ID_AUTO_INC_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SKILL_SET_ID_AUTO_INC_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."SKILL_SET_ID_AUTO_INC_TRIG" 
  BEFORE INSERT ON skill_sets
  FOR EACH ROW
BEGIN
  SELECT SKILL_SET_ID_AUTO_INC_SEQ.nextval
    INTO :new.skill_set_id
    FROM dual;
END;
/
ALTER TRIGGER "HR"."SKILL_SET_ID_AUTO_INC_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USER_ID_AUTO_INC_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."USER_ID_AUTO_INC_TRIG" 
  BEFORE INSERT ON users
  FOR EACH ROW
BEGIN
  SELECT user_id_auto_inc_seq.nextval
    INTO :new.user_id
    FROM dual;
END;
/
ALTER TRIGGER "HR"."USER_ID_AUTO_INC_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Function GETROWID
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "HR"."GETROWID" (tableName in varchar2,colName in varchar2,pkID in varchar2)
-- this function is used to get the row id for a given record.
-- tableName : the name of the table where need to look for row id .
-- colName   : the column name inside tableName where need to look for row id .
-- pkID      : the column parent key id inside tableName where need to look for row id .
-- this function used inside procedure DELETE_ROW_BY_PK .

return varchar2 IS
result varchar2(4000);
n_found         varchar2(4000);
l_status        integer;
l_theCursor     integer default dbms_sql.open_cursor;
l_descTbl       dbms_sql.desc_tab;
l_colCnt        number;

begin


        dbms_sql.parse(l_theCursor,'select rowid from '||tableName||' where '||colName||' = '||pkID, dbms_sql.NATIVE);
        dbms_sql.describe_columns( l_theCursor, l_colCnt, l_descTbl);
        dbms_sql.define_column(l_theCursor,l_colCnt, result, 4000);
        l_status := dbms_sql.execute(l_theCursor);
        while ( dbms_sql.fetch_rows(l_theCursor) > 0 ) 
        loop
        dbms_sql.column_value( l_theCursor, l_colCnt, result );
        end loop;
        
        
return result;
end getRowID;

/
--------------------------------------------------------
--  DDL for Function GETROWSCN
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "HR"."GETROWSCN" (tableName in varchar2,colName in varchar2,pkID in varchar2)
-- this function is used to get the SCN for a given record.
-- system change number (SCN) is a logical, internal time stamp used by Oracle Database.
-- tableName : the name of the table where need to look for scn .
-- colName   : the column name inside tableName where need to look for rscn .
-- pkID      : the column parent key id inside tableName where need to look scn .
-- this function used inside procedure DELETE_ROW_BY_PK .

return varchar2 IS
result varchar2(4000);
n_found         varchar2(4000);
l_status        integer;
l_theCursor     integer default dbms_sql.open_cursor;
l_descTbl       dbms_sql.desc_tab;
l_colCnt        number;

begin


        dbms_sql.parse(l_theCursor,'select ORA_ROWSCN from '||tableName||' where '||colName||' = '||pkID, dbms_sql.NATIVE);
        dbms_sql.describe_columns( l_theCursor, l_colCnt, l_descTbl);
        dbms_sql.define_column(l_theCursor,l_colCnt, result, 4000);
        l_status := dbms_sql.execute(l_theCursor);
        while ( dbms_sql.fetch_rows(l_theCursor) > 0 ) 
        loop
        dbms_sql.column_value( l_theCursor, l_colCnt, result );
        end loop;
        
        
return result;
end getROWSCN;

/
--------------------------------------------------------
--  DDL for Function GET_ALL_TABLES_NAMES
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "HR"."GET_ALL_TABLES_NAMES" 
--this function used to get all tables names for this DB as string comma seperated.
return varchar2 IS
result varchar2(4000);

BEGIN
result := get_table_to_string('SELECT table_name FROM user_tables');
  RETURN result;
END GET_ALL_TABLES_NAMES;

/
--------------------------------------------------------
--  DDL for Function GET_TABLE_COLUMNS_TYPES
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "HR"."GET_TABLE_COLUMNS_TYPES" (tableName in varchar2)
--this function used to get all table columns types for given table name as string comma seperated.
return varchar2 IS
result varchar2(4000);

BEGIN
      result:=get_table_to_string('select column_name,data_type || ''('' || data_length || '')'' from user_tab_columns where TABLE_NAME = '''||tableName||'''');
RETURN result;
END GET_TABLE_COLUMNS_TYPES;

/
--------------------------------------------------------
--  DDL for Function GET_TABLE_PK_COLUMN_NAME
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "HR"."GET_TABLE_PK_COLUMN_NAME" (tableName in varchar2)
--this function used to get pk column name for given table name as string.
return varchar2 IS
result varchar2(4000);

BEGIN
    SELECT cols.column_name into result
    FROM all_constraints cons, all_cons_columns cols
    WHERE cols.table_name = tableName AND ROWNUM = 1
    AND cons.constraint_type = 'P'
    AND cons.constraint_name = cols.constraint_name
    AND cons.owner = cols.owner
    ORDER BY cols.table_name, cols.position;    
  return result;
END GET_TABLE_PK_COLUMN_NAME;

/
--------------------------------------------------------
--  DDL for Function GET_TABLE_TO_STRING
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "HR"."GET_TABLE_TO_STRING" (t_table in varchar2)
-- this function is used to convert given table to string where each row is seperated by '$' sign ,
-- and each column for 1 row seperated by ',' sign.
-- using dbms sql query parser .
--https://docs.oracle.com/html/B14258_02/d_sql.htm#i996897
return varchar2 IS
result          varchar2(4000);
p_query         varchar2(4000);
l_theCursor     integer default dbms_sql.open_cursor;
l_columnValue   varchar2(4000);
l_status        integer;
l_descTbl       dbms_sql.desc_tab;
l_colCnt        number;
l_row           varchar2(4000);
row_number number;

begin
    p_query:=CONCAT('select * from ','(' || t_table || ')');
    result :='';
    --This procedure parses the given statement in the given cursor.
    --dbms_sql.parse(ID,statement,lb)
    --ID number of the cursor in which to parse the statement.
    --SQL statement to be parsed (DBMS_SQL.PARSE(cursor1, 'INSERT INTO tab VALUES(1)', 2);)
    --Lower bound for elements in the statement (native constant INTEGER := 1).
    dbms_sql.parse(l_theCursor,p_query,dbms_sql.native);
    
    --Describes the columns for a cursor opened and parsed through DBMS_SQL
    --dbms_sql.describe_columns (ID,col_cnt,output);
    --ID number of the cursor for the columns being described.
    --output col_cnt Number of columns in the select list of the query.
    --output The describe table to fill in with the description of each of the columns of the query. 
    --This table is indexed from one to the number of elements in the select list of the query.
    dbms_sql.describe_columns( l_theCursor, l_colCnt, l_descTbl);
    
    -- dbms_sql.define_column
    -- specify the variables in the cursor that are to receive the SELECT values, much the way an INTO clause does for a static query.
    
    for i in 1 .. l_colCnt loop
       dbms_sql.define_column(l_theCursor, i, l_columnValue, 4000);
    end loop;
    
    --This function executes a given cursor. This function accepts the ID number of the cursor and returns the number of rows processed. 
    --The return value is only valid for INSERT, UPDATE, and DELETE statements; 
    
    l_status := dbms_sql.execute(l_theCursor);
    
   
    -- print columns
    -- first col for numbering the rows
           l_row :=CONCAT(l_row, 'row number,');
           for i in 1 .. l_colCnt 
            loop
            
             dbms_sql.column_value( l_theCursor, i, l_columnValue );
             l_row :=CONCAT(l_row, l_descTbl(i).col_name);
             if(i<>l_colCnt)THEN l_row :=CONCAT(l_row,',');end if;
             
            end loop;
            result := CONCAT(result, l_row || '$');
    
    -- iterate over all rows and print thier values
    
     --This function fetches a row from a given cursor. 
    --You can call FETCH_ROWS repeatedly as long as there are rows remaining to be fetched.
    row_number:=1;
    while ( dbms_sql.fetch_rows(l_theCursor) > 0 ) 
      loop
          l_row:=row_number||',';
          for i in 1 .. l_colCnt 
          loop
           dbms_sql.column_value( l_theCursor, i, l_columnValue );
           if(l_columnValue is null) then l_columnValue:='null';end if;
           l_row :=CONCAT(l_row, l_columnValue);
           if(i<>l_colCnt)THEN l_row :=CONCAT(l_row,',');end if;
          end loop;
          result := CONCAT(result, l_row || '$');
          row_number:=(row_number+1);
    
           
      end loop;
     
     return result;
     
      exception
      --The WHEN OTHERS clause is used to trap all remaining exceptions that have not been handled
         when others then dbms_sql.close_cursor( l_theCursor );RAISE;   
end;

/
--------------------------------------------------------
--  DDL for Function GET_TABLE_TO_STRING_SORTED
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "HR"."GET_TABLE_TO_STRING_SORTED" (t_table in varchar2) 
-- this function is used to convert given table to string where each row is seperated by '$' sign ,
-- and each column for 1 row seperated by ',' sign.
-- using dbms sql query parser .
-- the sorting behavor is given inside the t_table after first comma
-- for example : users,user_id ascs.

--https://docs.oracle.com/html/B14258_02/d_sql.htm#i996897

return varchar2 IS
result varchar2(4000);
table_name varchar2(4000);
order_by varchar2(4000);
secCommaIndex number;
BEGIN
-- t_table is string 
secCommaIndex:=INSTR(t_table,',',1);
select SUBSTR(t_table,1,secCommaIndex-1) into table_name from dual;
select SUBSTR(t_table,secCommaIndex+1,length(t_table)) into order_by from dual;

if(order_by is null)then
DBMS_OUTPUT.PUT_LINE('1');
result := get_table_to_string('SELECT * FROM ' ||table_name);
else 
result := get_table_to_string('SELECT * FROM ' ||table_name||' ORDER BY ' || order_by);
DBMS_OUTPUT.PUT_LINE('2');
end if;

  RETURN result;
END GET_TABLE_TO_STRING_SORTED;

/
--------------------------------------------------------
--  DDL for Function JOIN_ALL_BY_UID
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "HR"."JOIN_ALL_BY_UID" (userid in number) 
-- this function is used to get all information for given user, joins all tables in DB by user_id.
return varchar2 IS
result varchar2(4000);
db_tabels varchar2(4000);
user_id varchar2(4000);
splitByIndex number;

BEGIN
DBMS_OUTPUT.PUT_LINE(db_tabels);
result := get_table_to_string
('

select * from
(
select * from
(
select * from
(
select * from
(
select * from
(
select * from
users left join players using(user_id)
)
left join guilds using(guild_id) 
)left join inventories using (player_id)
) left join equipments using (equipment_id)
) left join jobs using (job_id)
) left join skill_sets using(skill_set_id)
where user_id='||userid
);
RETURN result;
END JOIN_ALL_BY_UID;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_INVENTORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "HR"."DELETE_INVENTORY" (PLAYER_ID in number,EQUIPMENT_ID in number)
-- this procedure used to delete inventory records for given player,
-- the inventories table is many to many table that has 2 forgin keys : player_id,equipment_id .
IS
pk_column_name varchar2(4000);
l_theCursor     integer default dbms_sql.open_cursor;
l_status        integer;

BEGIN
-- This procedure parses the given statement in the given cursor.
-- dbms_sql.parse(ID,statement,lb)
-- ID number of the cursor in which to parse the statement.
-- SQL statement to be parsed (DBMS_SQL.PARSE(cursor1, 'INSERT INTO tab VALUES(1)', 2);)
-- Lower bound for elements in the statement (native constant INTEGER := 1).
-- dbms_sql.parse(l_theCursor,'select * from '|| tableName,dbms_sql.native);
  
-- delete this row by pk
  dbms_sql.parse(l_theCursor, 'delete from INVENTORIES where PLAYER_ID = '||PLAYER_ID||' and EQUIPMENT_ID = '||EQUIPMENT_ID, dbms_sql.NATIVE);
  l_status := dbms_sql.execute(l_theCursor);
  dbms_sql.close_cursor(l_theCursor);
  
-- set all fks for this pk as null
--  IS_PK_HAS_FKS_BY_PK(tableName,pk_column_name,pkID);
  
  exception
  --The WHEN OTHERS clause is used to trap all remaining exceptions that have not been handled
  when others then dbms_sql.close_cursor( l_theCursor );RAISE;
  
END DELETE_INVENTORY;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_ROW_BY_PK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "HR"."DELETE_ROW_BY_PK" (tableName in varchar2,pkID in varchar2)
-- this procedure used to delete record for given table name by parent key id
IS
pk_column_name varchar2(4000);
pk_rowid varchar2(4000);
pk_rowscn varchar2(4000);

l_theCursor     integer default dbms_sql.open_cursor;
l_status        integer;

BEGIN

   DBMS_OUTPUT.put_line ('BEGIN DELETE_ROW_BY_PK_WO_FKS');

---get the parent key column name for this table
   pk_column_name:=GET_TABLE_PK_COLUMN_NAME(tableName);
   DBMS_OUTPUT.put_line (pk_column_name);
---get row id and rowscn id for the pk id 
   pk_rowid:=getRowID(tableName,pk_column_name,pkID);
   DBMS_OUTPUT.put_line (pk_rowid);
   pk_rowscn:=getROWSCN(tableName,pk_column_name,pkID);
   DBMS_OUTPUT.put_line (pk_rowscn);

   



-- This procedure parses the given statement in the given cursor.
-- dbms_sql.parse(ID,statement,lb)
-- ID number of the cursor in which to parse the statement.
-- SQL statement to be parsed (DBMS_SQL.PARSE(cursor1, 'INSERT INTO tab VALUES(1)', 2);)
-- Lower bound for elements in the statement (native constant INTEGER := 1).
-- dbms_sql.parse(l_theCursor,'select * from '|| tableName,dbms_sql.native);
  
-- delete this row by pk
  dbms_sql.parse(l_theCursor, 'delete from '||tableName||' where ROWID = '''||pk_rowid||''' and ORA_ROWSCN = '''||pk_rowscn||''' and ( '||pk_column_name||' is null or '||pk_column_name||' is not null )' , dbms_sql.NATIVE);
  l_status := dbms_sql.execute(l_theCursor);
  dbms_sql.close_cursor(l_theCursor);
  
-- set all fks for this pk as null
--  IS_PK_HAS_FKS_BY_PK(tableName,pk_column_name,pkID);
  
  exception
  --The WHEN OTHERS clause is used to trap all remaining exceptions that have not been handled
  when others then dbms_sql.close_cursor( l_theCursor );RAISE;
  
END DELETE_ROW_BY_PK;

/
--------------------------------------------------------
--  DDL for Procedure DROP_TABLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "HR"."DROP_TABLE" (tableName in varchar2) 
-- this procedure used to drop table by table name inside this DB.
AS 
l_theCursor     integer default dbms_sql.open_cursor;
l_status        integer;
BEGIN
 dbms_sql.parse(l_theCursor,'DROP TABLE '||tableName||' CASCADE CONSTRAINTS', dbms_sql.NATIVE);
 l_status := dbms_sql.execute(l_theCursor);

END DROP_TABLE;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_ROW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "HR"."INSERT_ROW" (tableName in varchar2,rowValues in varchar2)
-- this procedure used insert new row to table by table name
-- tableName : the name of the table where row should be insert.
-- rowValues : the values that should be inserted. 
IS
l_theCursor     integer default dbms_sql.open_cursor;
l_status        integer;
l_descTbl       dbms_sql.desc_tab;
l_colCnt        number;
l_columnValue   varchar2(4000);

col_names varchar(4000);

begin

-- get column names

    col_names :='';
    --This procedure parses the given statement in the given cursor.
    --dbms_sql.parse(ID,statement,lb)
    --ID number of the cursor in which to parse the statement.
    --SQL statement to be parsed (DBMS_SQL.PARSE(cursor1, 'INSERT INTO tab VALUES(1)', 2);)
    --Lower bound for elements in the statement (native constant INTEGER := 1).
    dbms_sql.parse(l_theCursor,'select * from (' || tableName || ')',dbms_sql.native);
    
    --Describes the columns for a cursor opened and parsed through DBMS_SQL
    --dbms_sql.describe_columns (ID,col_cnt,output);
    --ID number of the cursor for the columns being described.
    --output col_cnt Number of columns in the select list of the query.
    --output The describe table to fill in with the description of each of the columns of the query. 
    --This table is indexed from one to the number of elements in the select list of the query.
    dbms_sql.describe_columns( l_theCursor, l_colCnt, l_descTbl);
    
    -- dbms_sql.define_column
    -- specify the variables in the cursor that are to receive the SELECT values, much the way an INTO clause does for a static query.
    
    for i in 1 .. l_colCnt loop
       dbms_sql.define_column(l_theCursor, i, l_columnValue, 4000);
    end loop;
    
    --This function executes a given cursor. This function accepts the ID number of the cursor and returns the number of rows processed. 
    --The return value is only valid for INSERT, UPDATE, and DELETE statements; 
    
    l_status := dbms_sql.execute(l_theCursor);
    
   
    -- print columns
           for i in 1 .. l_colCnt 
            loop
            
             dbms_sql.column_value( l_theCursor, i, l_columnValue );
             col_names :=CONCAT(col_names, l_descTbl(i).col_name);
             if(i<>l_colCnt)THEN col_names :=CONCAT(col_names,',');end if;
             
            end loop;
            
            DBMS_OUTPUT.PUT_LINE(col_names);
            DBMS_OUTPUT.PUT_LINE(rowValues);


-- insert row
  dbms_sql.parse(l_theCursor, 'insert into '||tableName||' ('||col_names||')'||'VALUES('||rowValues||')' , dbms_sql.NATIVE);
  l_status := dbms_sql.execute(l_theCursor);
  dbms_sql.close_cursor(l_theCursor);
    
  exception
  --The WHEN OTHERS clause is used to trap all remaining exceptions that have not been handled
  when others then dbms_sql.close_cursor( l_theCursor );RAISE;

end INSERT_ROW;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_COL_VALUE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "HR"."UPDATE_COL_VALUE" (tableName in varchar2,pkID in varchar2,colName in varchar2,newValue in varchar2)
-- this procedure used to update single column value for given table.
-- tableName : the name of the table where value should be updated.
-- pkID : the id of the parent key of table where value should be updated.
-- colName : the column name where value should be updated.
-- newValue : the new value to update.
IS
pk_column_name varchar2(4000);

l_theCursor     integer default dbms_sql.open_cursor;
l_status        integer;

begin
---get the parent key column name for this table
   pk_column_name:=GET_TABLE_PK_COLUMN_NAME(tableName);
   
-- This procedure parses the given statement in the given cursor.
-- dbms_sql.parse(ID,statement,lb)
-- ID number of the cursor in which to parse the statement.
-- SQL statement to be parsed (DBMS_SQL.PARSE(cursor1, 'INSERT INTO tab VALUES(1)', 2);)
-- Lower bound for elements in the statement (native constant INTEGER := 1).
-- dbms_sql.parse(l_theCursor,'select * from '|| tableName,dbms_sql.native);
  
-- update column values
  dbms_sql.parse(l_theCursor, 'update '||tableName||' set '||colName||' = '''|| newValue ||''' where '||pk_column_name||' = '||pkID , dbms_sql.NATIVE);
  l_status := dbms_sql.execute(l_theCursor);
  dbms_sql.close_cursor(l_theCursor);
    
  exception
  --The WHEN OTHERS clause is used to trap all remaining exceptions that have not been handled
  when others then dbms_sql.close_cursor( l_theCursor );RAISE;

end UPDATE_COL_VALUE;

/
